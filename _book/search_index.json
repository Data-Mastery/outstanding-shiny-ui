[
["index.html", "Advanced Shiny Pre-requisite About the author", " Advanced Shiny David Granjon 2019-04-30 Pre-requisite This book is intended for people already familiar with shiny. Some knowledges about HTML, CSS and Javascript are also appreciated but not mandatory. Since several years, significant efforts have been made to make shiny production ready. Today there exists tools to bridge the gap between “artisanal” and “professionnal apps”. Golem is a package that helps during this transition from local to production. Additionally, there exists prod-ready solutions to host these apps such as RStudio Connect, shiny server pro, shinyproxy, … However, most of shiny app in the wild still have the same design, in spite of shinydashboard and shinythemes development. There are alternatives such as shinymaterial and shiny semantic, but if we consider the number of existing HTML templates, very few are made available for shiny. End of november 2018, the RinteRface project was officially released … TO DO About the author David Granjon … TO DO "],
["intro.html", "Chapter 1 Advance Design 1.1 Selecting a good template", " Chapter 1 Advance Design In this chapter, you will learn how to build your own html templates taken from the web and package them, so that they can be re-used at any time by anybody. 1.1 Selecting a good template There exists tons of HTML templates over the web. However, only a few part will be suitable for shiny, mainly because of what follows: shiny is built on top of bootstrap 3 (HTML, CSS and Javascript framework), meaning that going for another framework might not be straightforward. However, shinymaterial and shiny.semantic are examples showing this can be possible. shiny relies on jQuery (currently v 1.12.4 for shiny, whereas the latest version is 3.3.1). Consequently, all templates based upon React, Vue and other Javascript framework will not be natively supported. Again, there exist some examples for React with shiny and more generally, the reactR package developed by Kent Russell ((???) on Twitter) and Alan Dipert from RStudio. See the github repository for more details about all dependencies related to the shiny package. Therefore in the following, we will restict ourself to Bootstrap (3 and 4) together with jQuery. Don’t be disapointed since there is still a lot to say. Notes: As shiny depends on Bootstrap 3.3.7, we recommand the user who would like to experiment Boostrap 4 features to be particularly careful about potential incompatibilies. See a working example here with bs4Dash. A good source of open source HTML templates is Colorlib and Creative Tim. You might also buy your template, but forget about the packaging option, which would be illegal in this particular case, unless you have a legal agreement with the author (very unlikely however). "],
["about-htmltools.html", "Chapter 2 About htmltools 2.1 HTML Tags 2.2 Dependency utilities", " Chapter 2 About htmltools While building a custom html template, you will need to know more about the wonderful htmltools developed by Winston Chang, member of the shiny core team. It has the same spirit as devtools, that is, making your web developer life easier. What follows does not have the pretention to be an exhaustive guide about this package. Yet, it will provide you yith the main tools to be more efficient. 2.1 HTML Tags Both shiny and htmltools contain tags. However, by experience, htmltools contains more exported tags than shiny. For instance, the HTML &lt;nav&gt;&lt;/nav&gt; tag, namely tags$nav() in R is not included in the shiny package but in htmltools. Within your package code, your tags will be like: # we use htmltools tags instead of shiny htmltools::tags$div(...) If you had to gather multiple tags together, prefer tagList() as list(), although the HTML output is the same. The first has the shiny.tag.list class in addition to list. 2.1.1 Notations Whether to use tags$div or div is the tag is exported by default. For instance, you could use htmltools::div but not htmltools::nav since nav does not have a dedicated function (only for p, h1, h2, h3, h4, h5, h6, a, br, div, span, pre, code, img, strong, em, hr). Rather use htmltools::tags$nav. Alternatively, there exists a function (in shiny and htmltools) called withTags(). Wrapping your code in this function enables you to use withTags(nav(), ...) instead of tags$nav(). 2.1.2 Alternative way to write tags htmltools and shiny come with the HTML() function that you can feed with raw HTML: HTML(&#39;&lt;div&gt;Blabla&lt;/div&gt;&#39;) # will render exactly like div(&quot;Blabla&quot;) # but there class is different class(HTML(&#39;&lt;div&gt;Blabla&lt;/div&gt;&#39;)) class(div(&quot;Blabla&quot;)) You will not be able to use tag related functions, as in the following parts. Therefore, I strongly recommand using R and not mixing HTML in R. 2.1.3 Tags structure According to the htmltools tag() function, a tag has: - a name such as span, div, h1 … - attributes, which you can access with tag$attribs - children, which you can access with tag$children - a class, namely “shiny.tag” For instance: # create the tag myTag &lt;- div( class = &quot;divclass&quot;, id = &quot;first&quot;, h1(&quot;Here comes your baby&quot;), span(class = &quot;child&quot;, id = &quot;baby&quot;, &quot;Ouinnnnn&quot;) ) # access its name myTag$name # access its attributes (id and class) myTag$attribs # access children (returns a list of 2 elements) myTag$children How to modify the class of the second child? second_children &lt;- myTag$children[[2]] second_children$attribs$class &lt;- &quot;adult&quot; myTag # Hummm, this is not working ... The code above is wrong. Indeed, by assigning myTag$children[[2]] to second_children, second_children$attribs$class &lt;- &quot;adult&quot; modifies the class of the copy and not the original object. Only one way: myTag$children[[2]]$attribs$class &lt;- &quot;adult&quot; myTag For strongly nested tags, you will see that the following section contains amazing functions, such as tagAppenChild(). 2.1.4 Useful functions for Tags htmltools and shiny have powerful functions to easily add attributes to tags, check for existing attributes, get attributes and add other tags to a list of tags. tagAppendAttributes(): this function allow you to add a new attribute to the current tag. For instance, assuming you created a div for which you forgot to add and id attribute: mydiv &lt;- div(&quot;Where is my brain&quot;) mydiv &lt;- tagAppendAttributes(mydiv, id = &quot;here_it_is&quot;) You can pass as many attributes as you want, including non standard attributes such as data-toggle (see Bootstrap 3 tabs for instance): mydiv &lt;- tagAppendAttributes(mydiv, `data-toggle` = &quot;tabs&quot;) # even though you could proceed as follows mydiv$attribs[[&quot;aria-controls&quot;]] &lt;- &quot;home&quot; tagHasAttribute(): to check if a tag has a specific attribute # I want to know if div has a class mydiv &lt;- div(class = &quot;myclass&quot;) has_class &lt;- tagHasAttribute(mydiv, &quot;class&quot;) has_class # if you are familiar with %&gt;% has_class &lt;- mydiv %&gt;% tagHasAttribute(&quot;class&quot;) has_class tagGetAttribute(): to get the value of the targeted attributes, if it exists, otherwise NULL. mydiv &lt;- div(class = &quot;test&quot;) # returns the class tagGetAttribute(mydiv, &quot;class&quot;) # returns NULL tagGetAttribute(mydiv, &quot;id&quot;) tagAppendChild() and tagAppendChildren(): add other tags to an existing tag. Whereas tagAppendChild() only takes on tag, you can pass a list of tags to tagAppendChildren(). mydiv &lt;- div(class = &quot;parent&quot;, id = &quot;mother&quot;, &quot;Not the mama!!!&quot;) otherTag &lt;- span(&quot;I am your child&quot;) mydiv &lt;- tagAppendChild(mydiv, otherTag) You might wonder why there is no tagRemoveChild() or tagRemoveAttributes(). 2.1.5 Other interesting functions The brighter package written by Colin Fay contains very neat functions to edit your tags. Particularly, the tagRemoveAttributes() remotes::install_github(&quot;Thinkr-open/brighter&quot;) library(brighter) mydiv &lt;- div(class = &quot;test&quot;, id = &quot;coucou&quot;, &quot;Prout&quot;) tagRemoveAttributes(mydiv, &quot;class&quot;, &quot;id&quot;) Up to you to create new functions to add in this package and do a nice PR. 2.2 Dependency utilities When creating a new template, you sometimes need to import custom HTML dependencies that do not come along with shiny. No problem, htmltools is here for you (shiny also contains these functions). 2.2.1 The dirty approach Let’s consider the following example. I want to include a bootstrap 4 card in a shiny app. This example is taken from an interesting question here. The naive approach would be to include the HTML code directly in the app code library(shiny) # we create the card function before my_card &lt;- function(...) { htmltools::withTags( div( class = &quot;card border-success mb-3&quot;, div(class = &quot;card-header bg-transparent border-success&quot;), div( class = &quot;card-body text-success&quot;, h3(class = &quot;card-title&quot;, &quot;title&quot;), p(class = &quot;card-text&quot;, ...) ), div(class = &quot;card-footer bg-transparent border-success&quot;, &quot;footer&quot;) ) ) } # we build our app shinyApp( ui = fluidPage( fluidRow( column( width = 6, align = &quot;center&quot;, br(), my_card(&quot;blablabla. PouetPouet Pouet.&quot;) ) ) ), server = function(input, output) {} ) and desesperately see that nothing is displayed. If you remember, this was expected since shiny does not contain bootstrap 4 dependencies and this card is unfortunately a bootstrap 4 object. Don’t panic! We just need to tell shiny to load the css we need to display this card (if required, we could include the javascript as well). We could use either includeCSS(), tags$head(tags$link(rel = &quot;stylesheet&quot;, type = &quot;text/css&quot;, href = &quot;custom.css&quot;)). See more here. shinyApp( ui = fluidPage( # load the css code includeCSS(path = &quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;), fluidRow( column( width = 6, align = &quot;center&quot;, br(), my_card(&quot;blablabla. PouetPouet Pouet.&quot;) ) ) ), server = function(input, output) {} ) The card is ugly (which is another problem we will fix later) but at least displayed. When I say this approach is dirty, it is because it will not be easily re-usable by others. Instead, we prefer a packaging approach, like in the next section. 2.2.2 The clean approach We will use the htmlDependency and attachDependencies functions from htmltools. The htmlDependency takes several arguments: the name of your dependency the version (useful to remember on which version it is built upon) a path to the dependency (can be a CDN or a local folder) script and stylesheet to respectively pass css and scripts # handle dependency card_css &lt;- &quot;bootstrap.min.css&quot; bs4_card_dep &lt;- function() { htmltools::htmlDependency( name = &quot;bs4_card&quot;, version = &quot;1.0&quot;, src = c(href = &quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/&quot;), stylesheet = card_css ) } We create the card tag and give it the bootstrap 4 dependency through the attachDependencies() function. # create the card my_card &lt;- function(...) { cardTag &lt;- htmltools::withTags( div( class = &quot;card border-success mb-3&quot;, div(class = &quot;card-header bg-transparent border-success&quot;), div( class = &quot;card-body text-success&quot;, h3(class = &quot;card-title&quot;, &quot;title&quot;), p(class = &quot;card-text&quot;, ...) ), div(class = &quot;card-footer bg-transparent border-success&quot;, &quot;footer&quot;) ) ) # attach dependencies htmltools::attachDependencies(cardTag, bs4_card_dep()) } We finally run our app: # run shiny app ui &lt;- fluidPage( title = &quot;Hello Shiny!&quot;, fluidRow( column( width = 6, align = &quot;center&quot;, br(), my_card(&quot;blablabla. PouetPouet Pouet.&quot;) ) ) ) shinyApp(ui, server = function(input, output) { }) With this approach, you could develop a package of custom dependencies that people could use when they need to add custom elements in shiny. "],
["template-skeleton.html", "Chapter 3 Template Skeleton", " Chapter 3 Template Skeleton Now that you have the basis about tags and dependencies, we can go through the template organisation… TO DO "],
["references.html", "References", " References "]
]
